pub mod control_flow;
pub mod call;
pub mod parametric;
pub mod variable;
pub mod memory;
pub mod constant;
pub mod comparison;
pub mod numeric;
pub mod conversion;
pub mod reinterpret;

use std::io::Write;
use std::io;

pub trait Bytecode {
	fn compile<W: Write>(&self, out: &mut W) -> io::Result<()>;
}

pub enum AnyBytecode {
	Unreachable(control_flow::Unreachable),
	NoOp(control_flow::NoOp),
	Block(control_flow::Block),
	Loop(control_flow::Loop),
	If(control_flow::If),
	Break(control_flow::Break),
	BreakIf(control_flow::BreakIf),
	BreakTable(control_flow::BreakTable),
	Return(control_flow::Return),

	Call(call::Call),
	CallIndirect(call::CallIndirect),

	Drop(parametric::Drop),
	Select(parametric::Select),

	GetLocal(variable::GetLocal),
	SetLocal(variable::SetLocal),
	TeeLocal(variable::TeeLocal),
	GetGlobal(variable::GetGlobal),
	SetGlobal(variable::SetGlobal),

	I32Load(memory::I32Load),
	I64Load(memory::I64Load),
	F32Load(memory::F32Load),
	F64Load(memory::F64Load),
	I32Load8S(memory::I32Load8S),
	I32Load8U(memory::I32Load8U),
	I32Load16S(memory::I32Load16S),
	I32Load16U(memory::I32Load16U),
	I64Load8S(memory::I64Load8S),
	I64Load8U(memory::I64Load8U),
	I64Load16S(memory::I64Load16S),
	I64Load16U(memory::I64Load16U),
	I64Load32S(memory::I64Load32S),
	I64Load32U(memory::I64Load32U),

	I32Store(memory::I32Store),
	I64Store(memory::I64Store),
	F32Store(memory::F32Store),
	F64Store(memory::F64Store),
	I32Store8(memory::I32Store8),
	I32Store16(memory::I32Store16),
	I64Store8(memory::I64Store8),
	I64Store16(memory::I64Store16),
	I64Store32(memory::I64Store32),
	CurrentMemory(memory::CurrentMemory),
	GrowMemory(memory::GrowMemory),

	I32Constant(constant::I32Constant),
	I64Constant(constant::I64Constant),
	F32Constant(constant::F32Constant),
	F64Constant(constant::F64Constant),

	I32EqualToZero(comparison::I32EqualToZero),
	I32Equal(comparison::I32Equal),
	I32NotEqual(comparison::I32NotEqual),
	I32LessThanSigned(comparison::I32LessThanSigned),
	I32LessThanUnsigned(comparison::I32LessOrEqualUnsigned),
	I32GreaterThanSigned(comparison::I32GreaterThanSigned),
	I32GreaterThanUnsigned(comparison::I32GreaterThanUnsigned),
	I32LessOrEqualSigned(comparison::I32LessOrEqualSigned),
	I32LessOrEqualUnsigned(comparison::I32LessOrEqualUnsigned),
	I32GreaterOrEqualSigned(comparison::I32GreaterOrEqualSigned),
	I32GreaterOrEqualUnsigned(comparison::I32GreaterThanUnsigned),

	I64EqualToZero(comparison::I64EqualToZero),
	I64Equal(comparison::I64Equal),
	I64NotEqual(comparison::I64NotEqual),
	I64LessThanSigned(comparison::I64LessThanSigned),
	I64LessThanUnsigned(comparison::I64LessThanUnsigned),
	I64GreaterThanSigned(comparison::I64GreaterThanSigned),
	I64GreaterThanUnsigned(comparison::I64GreaterThanUnsigned),
	I64LessOrEqualSigned(comparison::I64LessOrEqualSigned),
	I64LessOrEqualUnsigned(comparison::I64LessOrEqualUnsigned),
	I64GreaterOrEqualSigned(comparison::I64GreaterOrEqualSigned),
	I64GreaterOrEqualUnsigned(comparison::I64GreaterOrEqualUnsigned),

	F32Equal(comparison::F32Equal),
	F32NotEqual(comparison::F32NotEqual),
	F32LessThan(comparison::F32LessThan),
	F32GreaterThan(comparison::F32GreaterThan),
	F32LessOrEqual(comparison::F32LessOrEqual),
	F32GreaterOrEqual(comparison::F32GreaterOrEqual),

	F64Equal(comparison::F64Equal),
	F64NotEqual(comparison::F64NotEqual),
	F64LessThan(comparison::F64LessThan),
	F64GreaterThan(comparison::F64GreaterThan),
	F64LessOrEqual(comparison::F64LessOrEqual),
	F64GreaterOrEqual(comparison::F32GreaterOrEqual),

	I32CountLeadingZeros(numeric::I32CountLeadingZeros),
	I32CountTrailingZeros(numeric::I32CountTrailingZeros),
	I32PopulationCount(numeric::I32PopulationCount),
	I32Add(numeric::I32Add),
	I32Subtract(numeric::I32Subtract),
	I32Multiply(numeric::I32Multiply),
	I32DivideSigned(numeric::I32DivideSigned),
	I32DivideUnsigned(numeric::I32DivideUnsigned),
	I32RemainderSigned(numeric::I32RemainderSigned),
	I32And(numeric::I32And),
	I32Or(numeric::I32Or),
	I32Xor(numeric::I32Xor),
	I32ShiftLeft(numeric::I32ShiftLeft),
	I32ShiftRightSigned(numeric::I32ShiftRightSigned),
	I32ShiftRightUnsigned(numeric::I32ShiftRightUnsigned),
	I32RotateLeft(numeric::I32RotateLeft),
	I32RotateRight(numeric::I32RotateRight),

	I64CountLeadingZeros(numeric::I64CountLeadingZeros),
	I64CountTrailingZeros(numeric::I64CountTrailingZeros),
	I64PopulationCount(numeric::I64PopulationCount),
	I64Add(numeric::I64Add),
	I64Subtract(numeric::I64Subtract),
	I64Multiply(numeric::I64Multiply),
	I64DivideSigned(numeric::I64DivideSigned),
	I64DivideUnsigned(numeric::I64DivideUnsigned),
	I64RemainderSigned(numeric::I64RemainderSigned),
	I64And(numeric::I64And),
	I64Or(numeric::I64Or),
	I64Xor(numeric::I64Xor),
	I64ShiftLeft(numeric::I64ShiftLeft),
	I64ShiftRightSigned(numeric::I64ShiftRightSigned),
	I64ShiftRightUnsigned(numeric::I64ShiftRightUnsigned),
	I64RotateLeft(numeric::I64RotateLeft),
	I64RotateRight(numeric::I64RotateRight),

	F32AbsoluteValue(numeric::F32AbsoluteValue),
	F32Negate(numeric::F32Negate),
	F32Ceiling(numeric::F32Ceiling),
	F32Floor(numeric::F32Floor),
	F32Truncate(numeric::F32Truncate),
	F32Nearest(numeric::F32Nearest),
	F32SquareRoot(numeric::F32SquareRoot),
	F32Add(numeric::F32Add),
	F32Subtract(numeric::F32Subtract),
	F32Multiply(numeric::F32Multiply),
	F32Divide(numeric::F32Divide),
	F32Min(numeric::F32Min),
	F32Max(numeric::F32Max),
	F32CopySign(numeric::F32CopySign),

	F64AbsoluteValue(numeric::F64AbsoluteValue),
	F64Negate(numeric::F64Negate),
	F64Ceiling(numeric::F64Ceiling),
	F64Floor(numeric::F64Floor),
	F64Truncate(numeric::F64Truncate),
	F64Nearest(numeric::F64Nearest),
	F64SquareRoot(numeric::F64SquareRoot),
	F64Add(numeric::F64Add),
	F64Subtract(numeric::F64Subtract),
	F64Multiply(numeric::F64Multiply),
	F64Divide(numeric::F64Divide),
	F64Min(numeric::F64Min),
	F64Max(numeric::F64Max),
	F64CopySign(numeric::F64CopySign),

	I32WrapI64(conversion::I32WrapI64),
	I32TruncateSignedF32(conversion::I32TruncateSignedF32),
	I32TruncateUnsignedF32(conversion::I32TruncateUnsignedF32),
	I32TruncateSignedF64(conversion::I32TruncateSignedF64),
	I32TruncateUnsignedF64(conversion::I32TruncateUnsignedF64),

	I64ExtendSignedI32(conversion::I64ExtendSignedI32),
	I64ExtendUnsignedI32(conversion::I64ExtendUnsignedI32),
	I64TruncateSignedF32(conversion::I64TruncateSignedF32),
	I64TruncateUnsignedF32(conversion::I64TruncateUnsignedF32),
	I64TruncateSignedF64(conversion::I64TruncateSignedF64),
	I64TruncateUnsignedF64(conversion::I64TruncateUnsignedF64),

	F32ConvertSignedI32(conversion::F32ConvertSignedI32),
	F32ConvertUnsignedI32(conversion::F32ConvertUnsignedI32),
	F32ConvertSignedI64(conversion::F32ConvertSignedI64),
	F32ConvertUnsignedI64(conversion::F32ConvertUnsignedI64),
	F32DemoteF64(conversion::F32DemoteF64),

	F64ConvertSignedI32(conversion::F64ConvertSignedI32),
	F64ConvertUnsignedI32(conversion::F64ConvertUnsignedI32),
	F64ConvertSignedI64(conversion::F64ConvertSignedI64),
	F64ConvertUnsignedI64(conversion::F64ConvertUnsignedI64),
	F64PromoteF32(conversion::F64PromoteF32),

	I32ReinterpretF32(reinterpret::I32ReinterpretF32),
	I32ReinterpretF64(reinterpret::I32ReinterpretF64),
	F32ReinterpretI32(reinterpret::F32ReinterpretI32),
	F63ReinterpretI64(reinterpret::F64ReinterpretI64),

}

impl Bytecode for AnyBytecode {
	fn compile<W: Write>(&self, out: &mut W) -> io::Result<()> {
		match *self {
			AnyBytecode::Unreachable(ref x) => x.compile(out),
			AnyBytecode::NoOp(ref x) => x.compile(out),
			AnyBytecode::Block(ref x) => x.compile(out),
			AnyBytecode::Loop(ref x) => x.compile(out),
			AnyBytecode::If(ref x) => x.compile(out),
			AnyBytecode::Break(ref x) => x.compile(out),
			AnyBytecode::BreakIf(ref x) => x.compile(out),
			AnyBytecode::BreakTable(ref x) => x.compile(out),
			AnyBytecode::Return(ref x) => x.compile(out),

			AnyBytecode::Call(ref x) => x.compile(out),
			AnyBytecode::CallIndirect(ref x) => x.compile(out),

			AnyBytecode::Drop(ref x) => x.compile(out),
			AnyBytecode::Select(ref x) => x.compile(out),

			AnyBytecode::GetLocal(ref x) => x.compile(out),
			AnyBytecode::SetLocal(ref x) => x.compile(out),
			AnyBytecode::TeeLocal(ref x) => x.compile(out),
			AnyBytecode::GetGlobal(ref x) => x.compile(out),
			AnyBytecode::SetGlobal(ref x) => x.compile(out),

			AnyBytecode::I32Load(ref x) => x.compile(out),
			AnyBytecode::I64Load(ref x) => x.compile(out),
			AnyBytecode::F32Load(ref x) => x.compile(out),
			AnyBytecode::F64Load(ref x) => x.compile(out),
			AnyBytecode::I32Load8S(ref x) => x.compile(out),
			AnyBytecode::I32Load8U(ref x) => x.compile(out),
			AnyBytecode::I32Load16S(ref x) => x.compile(out),
			AnyBytecode::I32Load16U(ref x) => x.compile(out),
			AnyBytecode::I64Load8S(ref x) => x.compile(out),
			AnyBytecode::I64Load8U(ref x) => x.compile(out),
			AnyBytecode::I64Load16S(ref x) => x.compile(out),
			AnyBytecode::I64Load16U(ref x) => x.compile(out),
			AnyBytecode::I64Load32S(ref x) => x.compile(out),
			AnyBytecode::I64Load32U(ref x) => x.compile(out),

			AnyBytecode::I32Store(ref x) => x.compile(out),
			AnyBytecode::I64Store(ref x) => x.compile(out),
			AnyBytecode::F32Store(ref x) => x.compile(out),
			AnyBytecode::F64Store(ref x) => x.compile(out),
			AnyBytecode::I32Store8(ref x) => x.compile(out),
			AnyBytecode::I32Store16(ref x) => x.compile(out),
			AnyBytecode::I64Store8(ref x) => x.compile(out),
			AnyBytecode::I64Store16(ref x) => x.compile(out),
			AnyBytecode::I64Store32(ref x) => x.compile(out),
			AnyBytecode::CurrentMemory(ref x) => x.compile(out),
			AnyBytecode::GrowMemory(ref x) => x.compile(out),

			AnyBytecode::I32Constant(ref x) => x.compile(out),
			AnyBytecode::I64Constant(ref x) => x.compile(out),
			AnyBytecode::F32Constant(ref x) => x.compile(out),
			AnyBytecode::F64Constant(ref x) => x.compile(out),

			AnyBytecode::I32EqualToZero(ref x) => x.compile(out),
			AnyBytecode::I32Equal(ref x) => x.compile(out),
			AnyBytecode::I32NotEqual(ref x) => x.compile(out),
			AnyBytecode::I32LessThanSigned(ref x) => x.compile(out),
			AnyBytecode::I32LessThanUnsigned(ref x) => x.compile(out),
			AnyBytecode::I32GreaterThanSigned(ref x) => x.compile(out),
			AnyBytecode::I32GreaterThanUnsigned(ref x) => x.compile(out),
			AnyBytecode::I32LessOrEqualSigned(ref x) => x.compile(out),
			AnyBytecode::I32LessOrEqualUnsigned(ref x) => x.compile(out),
			AnyBytecode::I32GreaterOrEqualSigned(ref x) => x.compile(out),
			AnyBytecode::I32GreaterOrEqualUnsigned(ref x) => x.compile(out),

			AnyBytecode::I64EqualToZero(ref x) => x.compile(out),
			AnyBytecode::I64Equal(ref x) => x.compile(out),
			AnyBytecode::I64NotEqual(ref x) => x.compile(out),
			AnyBytecode::I64LessThanSigned(ref x) => x.compile(out),
			AnyBytecode::I64LessThanUnsigned(ref x) => x.compile(out),
			AnyBytecode::I64GreaterThanSigned(ref x) => x.compile(out),
			AnyBytecode::I64GreaterThanUnsigned(ref x) => x.compile(out),
			AnyBytecode::I64LessOrEqualSigned(ref x) => x.compile(out),
			AnyBytecode::I64LessOrEqualUnsigned(ref x) => x.compile(out),
			AnyBytecode::I64GreaterOrEqualSigned(ref x) => x.compile(out),
			AnyBytecode::I64GreaterOrEqualUnsigned(ref x) => x.compile(out),

			AnyBytecode::F32Equal(ref x) => x.compile(out),
			AnyBytecode::F32NotEqual(ref x) => x.compile(out),
			AnyBytecode::F32LessThan(ref x) => x.compile(out),
			AnyBytecode::F32GreaterThan(ref x) => x.compile(out),
			AnyBytecode::F32LessOrEqual(ref x) => x.compile(out),
			AnyBytecode::F32GreaterOrEqual(ref x) => x.compile(out),

			AnyBytecode::F64Equal(ref x) => x.compile(out),
			AnyBytecode::F64NotEqual(ref x) => x.compile(out),
			AnyBytecode::F64LessThan(ref x) => x.compile(out),
			AnyBytecode::F64GreaterThan(ref x) => x.compile(out),
			AnyBytecode::F64LessOrEqual(ref x) => x.compile(out),
			AnyBytecode::F64GreaterOrEqual(ref x) => x.compile(out),

			AnyBytecode::I32CountLeadingZeros(ref x) => x.compile(out),
			AnyBytecode::I32CountTrailingZeros(ref x) => x.compile(out),
			AnyBytecode::I32PopulationCount(ref x) => x.compile(out),
			AnyBytecode::I32Add(ref x) => x.compile(out),
			AnyBytecode::I32Subtract(ref x) => x.compile(out),
			AnyBytecode::I32Multiply(ref x) => x.compile(out),
			AnyBytecode::I32DivideSigned(ref x) => x.compile(out),
			AnyBytecode::I32DivideUnsigned(ref x) => x.compile(out),
			AnyBytecode::I32RemainderSigned(ref x) => x.compile(out),
			AnyBytecode::I32And(ref x) => x.compile(out),
			AnyBytecode::I32Or(ref x) => x.compile(out),
			AnyBytecode::I32Xor(ref x) => x.compile(out),
			AnyBytecode::I32ShiftLeft(ref x) => x.compile(out),
			AnyBytecode::I32ShiftRightSigned(ref x) => x.compile(out),
			AnyBytecode::I32ShiftRightUnsigned(ref x) => x.compile(out),
			AnyBytecode::I32RotateLeft(ref x) => x.compile(out),
			AnyBytecode::I32RotateRight(ref x) => x.compile(out),

			AnyBytecode::I64CountLeadingZeros(ref x) => x.compile(out),
			AnyBytecode::I64CountTrailingZeros(ref x) => x.compile(out),
			AnyBytecode::I64PopulationCount(ref x) => x.compile(out),
			AnyBytecode::I64Add(ref x) => x.compile(out),
			AnyBytecode::I64Subtract(ref x) => x.compile(out),
			AnyBytecode::I64Multiply(ref x) => x.compile(out),
			AnyBytecode::I64DivideSigned(ref x) => x.compile(out),
			AnyBytecode::I64DivideUnsigned(ref x) => x.compile(out),
			AnyBytecode::I64RemainderSigned(ref x) => x.compile(out),
			AnyBytecode::I64And(ref x) => x.compile(out),
			AnyBytecode::I64Or(ref x) => x.compile(out),
			AnyBytecode::I64Xor(ref x) => x.compile(out),
			AnyBytecode::I64ShiftLeft(ref x) => x.compile(out),
			AnyBytecode::I64ShiftRightSigned(ref x) => x.compile(out),
			AnyBytecode::I64ShiftRightUnsigned(ref x) => x.compile(out),
			AnyBytecode::I64RotateLeft(ref x) => x.compile(out),
			AnyBytecode::I64RotateRight(ref x) => x.compile(out),

			AnyBytecode::F32AbsoluteValue(ref x) => x.compile(out),
			AnyBytecode::F32Negate(ref x) => x.compile(out),
			AnyBytecode::F32Ceiling(ref x) => x.compile(out),
			AnyBytecode::F32Floor(ref x) => x.compile(out),
			AnyBytecode::F32Truncate(ref x) => x.compile(out),
			AnyBytecode::F32Nearest(ref x) => x.compile(out),
			AnyBytecode::F32SquareRoot(ref x) => x.compile(out),
			AnyBytecode::F32Add(ref x) => x.compile(out),
			AnyBytecode::F32Subtract(ref x) => x.compile(out),
			AnyBytecode::F32Multiply(ref x) => x.compile(out),
			AnyBytecode::F32Divide(ref x) => x.compile(out),
			AnyBytecode::F32Min(ref x) => x.compile(out),
			AnyBytecode::F32Max(ref x) => x.compile(out),
			AnyBytecode::F32CopySign(ref x) => x.compile(out),

			AnyBytecode::F64AbsoluteValue(ref x) => x.compile(out),
			AnyBytecode::F64Negate(ref x) => x.compile(out),
			AnyBytecode::F64Ceiling(ref x) => x.compile(out),
			AnyBytecode::F64Floor(ref x) => x.compile(out),
			AnyBytecode::F64Truncate(ref x) => x.compile(out),
			AnyBytecode::F64Nearest(ref x) => x.compile(out),
			AnyBytecode::F64SquareRoot(ref x) => x.compile(out),
			AnyBytecode::F64Add(ref x) => x.compile(out),
			AnyBytecode::F64Subtract(ref x) => x.compile(out),
			AnyBytecode::F64Multiply(ref x) => x.compile(out),
			AnyBytecode::F64Divide(ref x) => x.compile(out),
			AnyBytecode::F64Min(ref x) => x.compile(out),
			AnyBytecode::F64Max(ref x) => x.compile(out),
			AnyBytecode::F64CopySign(ref x) => x.compile(out),

			AnyBytecode::I32WrapI64(ref x) => x.compile(out),
			AnyBytecode::I32TruncateSignedF32(ref x) => x.compile(out),
			AnyBytecode::I32TruncateUnsignedF32(ref x) => x.compile(out),
			AnyBytecode::I32TruncateSignedF64(ref x) => x.compile(out),
			AnyBytecode::I32TruncateUnsignedF64(ref x) => x.compile(out),

			AnyBytecode::I64ExtendSignedI32(ref x) => x.compile(out),
			AnyBytecode::I64ExtendUnsignedI32(ref x) => x.compile(out),
			AnyBytecode::I64TruncateSignedF32(ref x) => x.compile(out),
			AnyBytecode::I64TruncateUnsignedF32(ref x) => x.compile(out),
			AnyBytecode::I64TruncateSignedF64(ref x) => x.compile(out),
			AnyBytecode::I64TruncateUnsignedF64(ref x) => x.compile(out),

			AnyBytecode::F32ConvertSignedI32(ref x) => x.compile(out),
			AnyBytecode::F32ConvertUnsignedI32(ref x) => x.compile(out),
			AnyBytecode::F32ConvertSignedI64(ref x) => x.compile(out),
			AnyBytecode::F32ConvertUnsignedI64(ref x) => x.compile(out),
			AnyBytecode::F32DemoteF64(ref x) => x.compile(out),

			AnyBytecode::F64ConvertSignedI32(ref x) => x.compile(out),
			AnyBytecode::F64ConvertUnsignedI32(ref x) => x.compile(out),
			AnyBytecode::F64ConvertSignedI64(ref x) => x.compile(out),
			AnyBytecode::F64ConvertUnsignedI64(ref x) => x.compile(out),
			AnyBytecode::F64PromoteF32(ref x) => x.compile(out),

			AnyBytecode::I32ReinterpretF32(ref x) => x.compile(out),
			AnyBytecode::I32ReinterpretF64(ref x) => x.compile(out),
			AnyBytecode::F32ReinterpretI32(ref x) => x.compile(out),
			AnyBytecode::F63ReinterpretI64(ref x) => x.compile(out),
		}
	}
}

impl Bytecode for Vec<AnyBytecode> {
	fn compile<W: Write>(&self, out: &mut W) -> io::Result<()> {
		for bytecode in self {
			bytecode.compile(out)?;
		}
		Ok(())
	}
}





